{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This lib is used to manage ch395 chip for 6502 cpu</p>"},{"location":"assembly/","title":"Assembly","text":""},{"location":"assembly/#assembly","title":"Assembly","text":""},{"location":"assembly/#ch395_check_exist","title":"ch395_check_exist","text":"<p>Description</p> <p>This command is used to test the communication interface and working state to check whether CH395 is working properly. This command needs to input 1 byte of data, which can be any data. If CH395 is working properly, the output data of CH395 will be the bitwise reverse of the input data. For example, if the input data is 57H, the output data will be A8H.</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Returns '#CH395_DETECTED' if it exists</li> </ul> <p>Example</p> <pre><code> jsr ch395_check_exist\ncmp #CH395_DETECTED\nbeq ch395_connected\nrts\nch395_connected:\n</code></pre>"},{"location":"assembly/#ch395_clear_recv_buf_sn","title":"ch395_clear_recv_buf_sn","text":"<p>Description</p> <p>This command is used to clear the Socket receive buffer. It is necessary to input 1 byte of Socket index value. Upon receiving this command, CH395 will reset the receiving length of this Socket, and the receiving pointer will point to the buffer head.</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #CH395_SOCKET1 ; Socket ID\njsr ch395_clear_recv_buf_sn\n</code></pre>"},{"location":"assembly/#ch395_close_socket_sn","title":"ch395_close_socket_sn","text":"<p>Description</p> <p>This command is used to close Socket. It is necessary to input a 1 byte of Socket index value. After Socket is closed, the receive buffer and transmit buffer of Socket are emptied, but the configuration information is still reserved, and you just need to open the Socket again when using the Socket the next time. In TCP mode, CH395 will automatically disconnect TCP before turning off Socket.</p> <p>Input</p> <ul> <li>Accumulator : The id of the socket to close</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket ID\njsr ch395_close_socket_sn\n</code></pre>"},{"location":"assembly/#ch395_dhcp_enable","title":"ch395_dhcp_enable","text":"<p>Description</p> <p>This command is used to start or stop DHCP. It is necessary to input a 1-byte flag. If the flag is 1, it will indicate that DHCP is on; if the flag is 0, it will indicate that DHCP is off. CH395 must be initialized before DHCP is started. After DHCP is started, CH395 will broadcast DHCPDISCOVER message to the network to discover DHCP Server, request the address and other configuration parameters after finding DHCP Server, and then generate GINT_STAT_DHCP interrupt. MCU can send GET_DHCP_STATUS command to get DHCP status. If the status code is 0, it will indicate success, and MCU can send the command GET_IP_INF to get IP, MASK and other information. If the status code is 1, it will indicate error, which is generally caused by timeout, for example, no DHCP Server is found. DHCP is always in a working state after startup unless it receives a DHCP shutdown command from MCU. During this process, if DHCP Server reassigns a configuration to CH395 and the configuration is different from the original configuration, CH395 will still generate an interrupt. After timeout interrupt is generated, if DHCP Server is not found, CH395 will continue to send DHCPDISCOVER message at an interval of about 16 seconds. It takes about 20MS to execute this command. MCU can send GET_CMD_STATUS to query whether the execution has finished and the execution status</p> <p>Input</p> <ul> <li>Accumulator : The mode to activate DHCP mode</li> </ul> <p>Modify</p> <ul> <li>X Register </li> </ul>"},{"location":"assembly/#ch395_enter_sleep","title":"ch395_enter_sleep","text":"<p>Description</p> <p>This command enables CH395 chip in a low-power sleep suspended state. When MCU writes a new command to CH395 (no data input command, such as CMD_GET_IC_VER), it will exit the low-power state. For the parallel port and SPI interface communication modes, active SCS chip selection will also cause CH395 to exit the low-power state, so MCU shall immediately disable the SCS chip selection after sending the command CMD_ENTER_SLEEP. In sleep state, MAC and PHY of CH395 will be in power off mode and disconnect Ethernet. Typically, it takes several milliseconds for CH395 to exit the low-power state.</p> <p>Does not work</p>"},{"location":"assembly/#ch395_get_cmd_status","title":"ch395_get_cmd_status","text":"<p>Description</p> <p>Get cmd status</p> <p>Example</p> <pre><code> jsr ch395_get_cmd_status\n; Check A for STATUS\nrts\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul>"},{"location":"assembly/#ch395_get_dhcp_status","title":"ch395_get_dhcp_status","text":"<p>Description</p> <p>Get dhcp status</p> <p>Example</p> <pre><code> jsr ch395_get_dhcp_status\n; Check A for dhcp status\nrts\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul>"},{"location":"assembly/#ch395_get_glob_int_status","title":"ch395_get_glob_int_status","text":"<p>Description</p> <p>Get General interrupt Status</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Status </li> </ul> <p>Example</p> <pre><code> jsr ch395_get_glob_int_status\n; check accumulator to get interrupts states\n</code></pre>"},{"location":"assembly/#ch395_get_ic_ver","title":"ch395_get_ic_ver","text":"<p>Description</p> <p>This command is used to get the chip and firmware versions. 1 byte of data returned is the version number, the bit 7 is 0, the bit 6 is 1, and the bits 5-0 are the version number. If the returned value is 41H, remove bits 7 and 6, and the version number will be 01H. It is called chip version in this text</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Version </li> </ul> <p>Example</p> <pre><code> jsr ch395_get_ic_ver\n; Check A for version\nrts\n</code></pre>"},{"location":"assembly/#ch395_get_int_status_sn","title":"ch395_get_int_status_sn","text":"<p>Description</p> <p>Check interrupt socket status</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Status of selected socket</li> </ul> <p>Example</p> <pre><code> lda #CH395_SOCKET1 ; Check socket 1\njsr ch395_get_int_status_sn\n; Check interrupt type\nand #CH395_SINT_STAT_SEND_OK\ncmp #CH395_SINT_STAT_SEND_OK\nbeq @send_ok\nrts\n</code></pre>"},{"location":"assembly/#ch395_get_ip_inf","title":"ch395_get_ip_inf","text":"<p>Description</p> <p>Get ip info</p> <p>Input</p> <ul> <li>Accumulator : the ptr to modify</li> <li>X Register : the ptr to modify</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> <li>RESTmp value</li> </ul>"},{"location":"assembly/#ch395_get_mac_adress","title":"ch395_get_mac_adress","text":"<p>Description</p> <p>Get mac address</p> <p>Input</p> <ul> <li>Accumulator : the ptr</li> <li>X Register : the ptr</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> <li>RESTmp value</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : the content of ptr modified</p> </li> <li> <p>X Register : the content of ptr modified</p> </li> </ul>"},{"location":"assembly/#ch395_get_phy_status","title":"ch395_get_phy_status","text":"<p>Description</p> <p>Get physical status</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : The physical status</li> </ul> <p>Example</p> <pre><code> jsr ch395_get_phy_status\n; Check A physical status\nrts\n</code></pre>"},{"location":"assembly/#ch395_get_recv_len_sn","title":"ch395_get_recv_len_sn","text":"<p>Description</p> <p>Get the length received from socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\njsr ch395_get_recv_len_sn\n; check A and X for length received\nch395_connected:\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : The length</p> </li> <li> <p>X Register : The length</p> </li> </ul>"},{"location":"assembly/#ch395_get_remot_ipp_sn","title":"ch395_get_remot_ipp_sn","text":"<p>Description</p> <p>Get remote ip connected to the socket</p> <p>Input</p> <ul> <li>Accumulator : The Socket for the ip to get</li> <li>X Register : The ptr (high) to store the ip</li> <li>Y Register : The ptr (low) to store the ip</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> <li>RES</li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\nldx #&lt;ip_dest\nldy #&gt;ip_dest\njsr ch395_get_remot_ipp_sn\nrts\nipdest:\n.byte 192,168,0,1\n</code></pre>"},{"location":"assembly/#ch395_get_socket_status_sn","title":"ch395_get_socket_status_sn","text":"<p>Description</p> <p>Returns in A socket status (close/open ...)</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>X Register </li> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : The status</p> </li> <li> <p>X Register : The state</p> </li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\njsr ch395_get_socket_status_sn\n; check A and X for the state\ncmp #CH395_SOCKET_CLOSED\nbeq @soclet is closed\n</code></pre>"},{"location":"assembly/#ch395_init","title":"ch395_init","text":"<p>Description</p> <p>Initialize ch395</p> <p>Modify</p> <ul> <li>Accumulator  Description</li> </ul> <p>Reset ch395</p> <p>Example</p> <pre><code> jsr ch395_init\n; Wait a bit\n</code></pre>"},{"location":"assembly/#ch395_open_socket_sn","title":"ch395_open_socket_sn","text":"<p>Description</p> <p>Open socket from arg</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul>"},{"location":"assembly/#ch395_read_recv_buf_sn","title":"ch395_read_recv_buf_sn","text":"<p>Description</p> <p>Get buffer from socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ptr to fill</li> <li>X Register : X ptr to fill</li> </ul> <p>Modify</p> <ul> <li>REStmp value</li> <li>RESBtmp value</li> </ul>"},{"location":"assembly/#ch395_reset_all","title":"ch395_reset_all","text":"<p>Description</p> <p>This command enables CH395 to perform a hardware reset. Typically, hardware reset is completed within 50mS.</p> <p>Example</p> <pre><code> jsr ch395_reset_all\n; Wait a bit\n</code></pre>"},{"location":"assembly/#ch395_retran_period","title":"ch395_retran_period","text":"<p>Description</p> <p>Retran period</p> <p>Input</p> <ul> <li>Accumulator : Period </li> <li>X Register : Period </li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #$FF\nldx #$FF\njsr ch395_retran_period\nrts\n</code></pre>"},{"location":"assembly/#ch395_set_baudrate","title":"ch395_set_baudrate","text":"<p>Description</p> <p>This command is used to set the baud rate of CH395 for serial communication. When CH395 works in serial communication mode, the default communication baud rate is set by the level combination of SDO, SDI and SCK pins (refer to Section 6.4 of this datasheet) after reset. When these pins are suspended, the baud rate is 9600bps by default. If MCU supports high communication speed, the serial communication baud rate can be dynamically regulated through this command. This command requires the input of three data, namely, baudrate coefficient 0, baud rate coefficient 1 and baud rate coefficient 2. The following table shows the corresponding relationship with baud rates.</p>"},{"location":"assembly/#ch395_set_des_port_sn","title":"ch395_set_des_port_sn","text":"<p>Description</p> <p>Set dest port socket</p> <p>Input</p> <ul> <li>Accumulator : Socketid </li> <li>Y Register : Low int</li> <li>X Register : high int</li> </ul> <p>Modify</p> <ul> <li>REStmp</li> </ul> <p>Example</p> <pre><code> lda #$01\nldx #80\nldx #$00\njsr ch395_set_des_port_sn\nrts\n</code></pre>"},{"location":"assembly/#ch395_set_fun_para","title":"ch395_set_fun_para","text":"<p>Description</p> <p>Set fun para</p> <p>Input</p> <ul> <li>Accumulator : Value </li> </ul> <p>Modify</p> <ul> <li>Y Register </li> <li>Accumulator </li> </ul>"},{"location":"assembly/#ch395_set_gwip_addr","title":"ch395_set_gwip_addr","text":"<p>Description</p> <p>This command is used to set the gateway address for CH395. It is necessary to input 4 bytes of IP address</p> <p>Does not work</p>"},{"location":"assembly/#ch395_set_ip_addr","title":"ch395_set_ip_addr","text":"<p>Description</p> <p>Set ip row</p> <p>Does not work</p>"},{"location":"assembly/#ch395_set_ip_addr_sn","title":"ch395_set_ip_addr_sn","text":"<p>Description</p> <p>Set Socket Ip address to connect with</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"assembly/#ch395_set_ipraw_pro_sn","title":"ch395_set_ipraw_pro_sn","text":"<p>Description</p> <p>Set ipraw protocol on socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>X Register : the mode proto</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul>"},{"location":"assembly/#ch395_set_mac_adress","title":"ch395_set_mac_adress","text":"<p>Description</p> <p>This command is used to set MAC address for CH395. It is necessary to input 6 bytes of MAC, with low bytes of MAC address in front. CH395 chip will store MAC address in the internal EEPROM. It will take 100mS to execute this command.MAC address assigned by IEEE has been burned when CH395 chip is delivered. If it is not necessary, please do not set MAC address</p> <p>Input</p> <ul> <li>Accumulator : Low ptr mac adress</li> <li>X Register : High ptr mac adress</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>Y Register </li> <li>RESTmp</li> </ul>"},{"location":"assembly/#ch395_set_mask_addr","title":"ch395_set_mask_addr","text":"<p>Description</p> <p>This command is used to set the subnet mask for CH395. It is necessary to input 4 bytes of mask for this command. It is 255.255.255.0 by default and may not be set</p> <p>Does not work</p>"},{"location":"assembly/#ch395_set_phy","title":"ch395_set_phy","text":"<p>Description</p> <p>This command is used to set Ethernet PHY connection mode of CH395. The connection mode is automated negotiation mode by default. This command needs to input 1 byte of data, which is the connection mode code: Disconnect PHY when the connection mode code is 01H; PHY is 10M full duplex when the connection mode code is 02H; PHY is 10M half duplex when the connection mode code is 04H; PHY is 100M full duplex when the connection mode code is 08H; PHY is 100M half duplex when the connection mode code is 10H; PHY is automated negotiation when the connection mode code is 20H. When CH395 receives this command, it will reset MAC and PHY and reconnect according to the newly set connection mode. If Ethernet is already connected, it will be disconnected and reconnected.</p> <p>Does not work</p>"},{"location":"assembly/#ch395_set_proto_type_sn","title":"ch395_set_proto_type_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"assembly/#ch395_set_retran_count","title":"ch395_set_retran_count","text":"<p>Description</p> <p>Set retran period</p> <p>Input</p> <ul> <li>Accumulator : Retran period</li> </ul>"},{"location":"assembly/#ch395_set_sour_port_sn","title":"ch395_set_sour_port_sn","text":"<p>Description</p> <p>Set source port</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ptr address</li> <li>X Register : High ptr address</li> </ul> <p>Modify</p> <ul> <li>RES</li> </ul>"},{"location":"assembly/#ch395_set_ttl","title":"ch395_set_ttl","text":"<p>Description</p> <p>This command is used to set Socket TTL. It is necessary to input 1 byte of Socket index value and 1 byte of TTL value. It shall be set after the Socket is opened, and the maximum value is 128</p> <p>Input</p> <ul> <li>Accumulator : Socket ID</li> <li>X Register : TTL value</li> </ul>"},{"location":"assembly/#ch395_tcp_connect_sn","title":"ch395_tcp_connect_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"assembly/#ch395_tcp_disconnect_sn","title":"ch395_tcp_disconnect_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"assembly/#ch395_tcp_listen_sn","title":"ch395_tcp_listen_sn","text":"<p>Description</p> <p>TCP listen socket</p>"},{"location":"assembly/#ch395_write_send_buf_sn","title":"ch395_write_send_buf_sn","text":"<p>Description</p> <p>Send data to socketid</p> <p>Input</p> <ul> <li>Accumulator : Socket ID</li> <li>Y Register : Low length</li> <li>X Register : High length</li> <li>RESB : Adress ptr to read</li> </ul> <p>Modify</p> <ul> <li>RESTmp</li> </ul>"},{"location":"c/","title":"C","text":""},{"location":"c/#c","title":"C","text":""},{"location":"c/#unsigned-char-ch395_check_exist","title":"unsigned char ch395_check_exist();","text":"<p>Description</p> <p>Checks if ch395 exists</p>"},{"location":"c/#void-ch395_clear_recv_buf_snunsigned-char-id_socket","title":"void ch395_clear_recv_buf_sn(unsigned char ID_SOCKET)","text":"<p>Description</p> <p>This command is used to clear the Socket receive buffer. It is necessary to input 1 byte of Socket index value. Upon receiving this command, CH395 will reset the receiving length of this Socket, and the receiving pointer will point to the buffer head.</p>"},{"location":"c/#void-ch395_close_socket_snunsigned-char-socketid","title":"void ch395_close_socket_sn(unsigned char socketid)","text":"<p>Description</p> <p>This command is used to close Socket. It is necessary to input a 1 byte of Socket index value. After Socket is closed, the receive buffer and transmit buffer of Socket are emptied, but the configuration information is still reserved, and you just need to open the Socket again when using the Socket the next time. In TCP mode, CH395 will automatically disconnect TCP before turning off Socket.</p> <p>Input</p>"},{"location":"c/#void-ch395_dhcp_enable","title":"void ch395_dhcp_enable()","text":"<p>Description</p> <p>This command is used to start or stop DHCP. It is necessary to input a 1-byte flag. If the flag is 1, it will indicate that DHCP is on; if the flag is 0, it will indicate that DHCP is off. CH395 must be initialized before DHCP is started. After DHCP is started, CH395 will broadcast DHCPDISCOVER message to the network to discover DHCP Server, request the address and other configuration parameters after finding DHCP Server, and then generate GINT_STAT_DHCP interrupt. MCU can send GET_DHCP_STATUS command to get DHCP status. If the status code is 0, it will indicate success, and MCU can send the command GET_IP_INF to get IP, MASK and other information. If the status code is 1, it will indicate error, which is generally caused by timeout, for example, no DHCP Server is found. DHCP is always in a working state after startup unless it receives a DHCP shutdown command from MCU. During this process, if DHCP Server reassigns a configuration to CH395 and the configuration is different from the original configuration, CH395 will still generate an interrupt. After timeout interrupt is generated, if DHCP Server is not found, CH395 will continue to send DHCPDISCOVER message at an interval of about 16 seconds. It takes about 20MS to execute this command. MCU can send GET_CMD_STATUS to query whether the execution has finished and the execution status</p> <p>Description</p> <p>Get cmd status</p>"},{"location":"c/#unsigned-char-ch395_get_cmd_status","title":"unsigned char ch395_get_cmd_status();","text":""},{"location":"c/#unsigned-char-ch395_get_dhcp_status","title":"unsigned char ch395_get_dhcp_status();","text":"<p>Description</p> <p>Get dhcp status</p>"},{"location":"c/#unsigned-int-ch395_get_glob_int_status","title":"unsigned int ch395_get_glob_int_status();","text":"<p>Description</p> <p>Get General interrupt Status</p>"},{"location":"c/#unsigned-char-ch395_get_ic_ver","title":"unsigned char ch395_get_ic_ver();","text":"<p>Description</p> <p>Get ch395 firmware version</p>"},{"location":"c/#unsigned-char-ch395_get_int_status_snunsigned-char-id_socket","title":"unsigned char ch395_get_int_status_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Check interrupt socket status</p> <p>Input</p>"},{"location":"c/#void-ch395_get_ip_infunsigned-char-ip_infos","title":"void ch395_get_ip_inf(unsigned char ip_infos[]);","text":"<p>Description</p> <p>Get ip info</p>"},{"location":"c/#void-ch395_get_mac_adressunsigned-char-macaddress","title":"void ch395_get_mac_adress(unsigned char macaddress[]);","text":"<p>Description</p> <p>Get mac address</p>"},{"location":"c/#unsigned-char-ch395_get_phy_status","title":"unsigned char ch395_get_phy_status();","text":"<p>Description</p> <p>Get physical status</p>"},{"location":"c/#void-ch395_get_recv_len_snunsigned-char-id_socket","title":"void ch395_get_recv_len_sn(unsigned char ID_SOCKET)","text":"<p>Description</p> <p>Get the length received from socket</p> <p>Input</p>"},{"location":"c/#void-ch395_get_remot_ipp_snunsigned-char-ptr-unsigned-char-socket","title":"void ch395_get_remot_ipp_sn(unsigned char *ptr, unsigned char socket);","text":"<p>Description</p> <p>Get remote ip connected to the socket</p> <p>Input</p>"},{"location":"c/#unsigned-int-ch395_get_socket_status_snunsigned-char-id_socket","title":"unsigned int ch395_get_socket_status_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Returns in A socket status (close/open ... )</p> <p>Input</p>"},{"location":"c/#void-ch395_init","title":"void ch395_init();","text":"<p>Description</p> <p>Initialize ch395</p>"},{"location":"c/#void-ch395_open_socket_snunsigned-char-id_socket","title":"void ch395_open_socket_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"c/#void-ch395_read_recv_buf_snunsigned-char-buffer-unsigned-int-ptr2unsigned-char-id_socket","title":"void ch395_read_recv_buf_sn(unsigned char *buffer, unsigned int ptr2,unsigned char ID_SOCKET);","text":"<p>Input</p>"},{"location":"c/#void-ch395_reset_all","title":"void ch395_reset_all()","text":"<p>Description</p> <p>Reset ch395</p>"},{"location":"c/#void-ch395_retran_periodunsigned-int-period","title":"void ch395_retran_period(unsigned int period);","text":"<p>Description</p> <p>Retran period</p>"},{"location":"c/#void-ch395_set_des_port_snunsigned-int-port-unsigned-char-id_socket","title":"void ch395_set_des_port_sn(unsigned int port, unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Set dest port socket</p> <p>Input</p>"},{"location":"c/#void-ch395_set_fun_paraunsigned-char-flag","title":"void ch395_set_fun_para(unsigned char flag)","text":"<p>Description</p> <p>Set fun para</p> <p>Description</p> <p>Set gateway ip addr</p> <p>Description</p> <p>Set ip addr</p>"},{"location":"c/#void-ch395_set_ip_addr_snunsigned-char-ip_addr-unsigned-char-id_socket","title":"void ch395_set_ip_addr_sn(unsigned char ip_addr[], unsigned char ID_SOCKET)","text":""},{"location":"c/#void-ch395_set_ipraw_pro_snunsigned-char-id_socket","title":"void ch395_set_ipraw_pro_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Set ipraw protocol on socket</p> <p>Input</p>"},{"location":"c/#void-ch395_set_mac_adressunsigned-char-macaddress","title":"void ch395_set_mac_adress(unsigned char macaddress[]);","text":""},{"location":"c/#void-ch395_set_proto_type_snunsigned-char-protounsigned-char-id_socket","title":"void ch395_set_proto_type_sn(unsigned char proto,unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"c/#void-ch395_set_retran_countunsigned-int-period","title":"void ch395_set_retran_count(unsigned int period);","text":"<p>Description</p> <p>Set retran period</p>"},{"location":"c/#void-ch395_set_sour_port_snunsigned-int-portunsigned-char-id_socket","title":"void ch395_set_sour_port_sn(unsigned int port,unsigned char ID_SOCKET)","text":"<p>Description</p> <p>Set source socket</p> <p>Input</p> <p>Description</p> <p>This command is used to set Socket TTL. It is necessary to input 1 byte of Socket index value and 1 byte of TTL value. It shall be set after the Socket is opened, and the maximum value is 128</p>"},{"location":"c/#ch395_set_ttlunsigned-char-id_socket-unsigned-char-ttl_value","title":"ch395_set_ttl(unsigned char ID_SOCKET, unsigned char ttl_value);","text":""},{"location":"c/#void-ch395_tcp_connect_snunsigned-char-id_socket","title":"void ch395_tcp_connect_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"c/#void-ch395_tcp_disconnect_snunsigned-char-id_socket","title":"void ch395_tcp_disconnect_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"c/#void-ch395_tcp_listen_snunsigned-char-id_socket","title":"void ch395_tcp_listen_sn(unsigned char ID_SOCKET)","text":""},{"location":"c/#void-ch395_write_send_buf_snunsigned-char-buffer-unsigned-int-lengthunsigned-char-id_socket","title":"void ch395_write_send_buf_sn(unsigned char *buffer, unsigned int length,unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Send data to socketid [Not working]</p> <p>Input</p>"},{"location":"2024.1/assembly/","title":"Assembly","text":""},{"location":"2024.1/assembly/#assembly","title":"Assembly","text":""},{"location":"2024.1/assembly/#ch395_check_exist","title":"ch395_check_exist","text":"<p>Description</p> <p>Checks if ch395 exists</p> <p>Example</p> <pre><code> jsr ch395_get_glob_int_status\ncmp #CH395_DETECTED\nbeq ch395_connected\nrts\nch395_connected:\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Returns #CH395_DETECTED if it exists</li> </ul>"},{"location":"2024.1/assembly/#ch395_clear_recv_buf_sn","title":"ch395_clear_recv_buf_sn","text":"<p>Description</p> <p>Clear receive buffer</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #CH395_SOCKET1 ; Socket ID\njsr ch395_clear_recv_buf_sn\n</code></pre>"},{"location":"2024.1/assembly/#ch395_close_socket_sn","title":"ch395_close_socket_sn","text":"<p>Description</p> <p>Close socket</p> <p>Input</p> <ul> <li>Accumulator : The id of the socket to close</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket ID\njsr ch395_close_socket_sn\n</code></pre>"},{"location":"2024.1/assembly/#ch395_dhcp_enable","title":"ch395_dhcp_enable","text":"<p>Description</p> <p>Enable or not dhcp</p> <p>Input</p> <ul> <li>Accumulator : The mode to activate DHCP mode</li> </ul> <p>Modify</p> <ul> <li>X Register </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_cmd_status","title":"ch395_get_cmd_status","text":"<p>Description</p> <p>Get cmd status</p> <p>Example</p> <pre><code> jsr ch395_get_cmd_status\n; Check A for STATUS\nrts\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_dhcp_status","title":"ch395_get_dhcp_status","text":"<p>Description</p> <p>Get dhcp status</p> <p>Example</p> <pre><code> jsr ch395_get_dhcp_status\n; Check A for dhcp status\nrts\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_glob_int_status","title":"ch395_get_glob_int_status","text":"<p>Description</p> <p>Get General interrupt Status</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Example</p> <pre><code> jsr ch395_get_glob_int_status\n; check accumulator to get interrupts states\n</code></pre>"},{"location":"2024.1/assembly/#ch395_get_ic_ver","title":"ch395_get_ic_ver","text":"<p>Description</p> <p>Get ch395 firmware version</p> <p>Example</p> <pre><code> jsr ch395_get_ic_ver\n; Check A for version\nrts\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_int_status_sn","title":"ch395_get_int_status_sn","text":"<p>Description</p> <p>Check interrupt socket status</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Status of selected socket</li> </ul> <p>Example</p> <pre><code> lda #CH395_SOCKET1 ; Check socket 1\njsr ch395_get_int_status_sn\n; Check interrupt type\nrts\n</code></pre>"},{"location":"2024.1/assembly/#ch395_get_ip_inf","title":"ch395_get_ip_inf","text":"<p>Description</p> <p>Get ip info</p> <p>Input</p> <ul> <li>Accumulator : the ptr to modify</li> <li>X Register : the ptr to modify</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_mac_adress","title":"ch395_get_mac_adress","text":"<p>Description</p> <p>Get mac address</p> <p>Input</p> <ul> <li>Accumulator : the ptr</li> <li>X Register : the ptr</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : the content of ptr modified</p> </li> <li> <p>X Register : the content of ptr modified</p> </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_phy_status","title":"ch395_get_phy_status","text":"<p>Description</p> <p>Get physical status</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : The physical status</li> </ul> <p>Example</p> <pre><code> jsr ch395_get_phy_status\n; Check A physical status\nrts\n</code></pre>"},{"location":"2024.1/assembly/#ch395_get_recv_len_sn","title":"ch395_get_recv_len_sn","text":"<p>Description</p> <p>Get the length received from socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\njsr ch395_get_recv_len_sn\n; check A and X for length received\nch395_connected:\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : The length</p> </li> <li> <p>X Register : The length</p> </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_remot_ipp_sn","title":"ch395_get_remot_ipp_sn","text":"<p>Description</p> <p>Get remote ip connected to the socket</p> <p>Input</p> <ul> <li>Accumulator : The Socket for the ip to get</li> <li>X Register : The ptr (high) to store the ip</li> <li>Y Register : The ptr (low) to store the ip</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> </ul>"},{"location":"2024.1/assembly/#ch395_get_socket_status_sn","title":"ch395_get_socket_status_sn","text":"<p>Description</p> <p>Returns in A socket status (close/open ...)</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>X Register </li> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : The status</p> </li> <li> <p>X Register : The state</p> </li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\njsr ch395_get_socket_status_sn\n; check A and X for the state\n</code></pre>"},{"location":"2024.1/assembly/#ch395_init","title":"ch395_init","text":"<p>Description</p> <p>Initialize ch395</p> <p>Modify</p> <ul> <li>Accumulator  Description</li> </ul> <p>Reset ch395</p> <p>Example</p> <pre><code> jsr ch395_init\n; Wait a bit\n</code></pre>"},{"location":"2024.1/assembly/#ch395_open_socket_sn","title":"ch395_open_socket_sn","text":"<p>Description</p> <p>Open socket from arg</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul>"},{"location":"2024.1/assembly/#ch395_read_recv_buf_sn","title":"ch395_read_recv_buf_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.1/assembly/#ch395_reset_all","title":"ch395_reset_all","text":"<p>Description</p> <p>Reset ch395</p> <p>Example</p> <pre><code> jsr ch395_reset_all\n; Wait a bit\n</code></pre>"},{"location":"2024.1/assembly/#ch395_retran_period","title":"ch395_retran_period","text":"<p>Description</p> <p>Retran period</p> <p>Input</p> <ul> <li>Accumulator : Period </li> <li>X Register : Period </li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #$FF\nldx #$FF\njsr ch395_retran_period\nrts\n</code></pre>"},{"location":"2024.1/assembly/#ch395_set_des_port_sn","title":"ch395_set_des_port_sn","text":"<p>Description</p> <p>Set dest port socket</p> <p>Input</p> <ul> <li>Accumulator : Socketid </li> <li>Y Register : Low int</li> <li>X Register : high int</li> </ul> <p>Example</p> <pre><code> lda #$01\nldx #80\nldx #$00\njsr ch395_set_des_port_sn\nrts\n</code></pre>"},{"location":"2024.1/assembly/#ch395_set_fun_para","title":"ch395_set_fun_para","text":"<p>Description</p> <p>Set fun para</p> <p>Input</p> <ul> <li>Accumulator : Value </li> </ul> <p>Modify</p> <ul> <li>Y Register </li> <li>Accumulator </li> </ul>"},{"location":"2024.1/assembly/#ch395_set_gwip_addr","title":"ch395_set_gwip_addr","text":"<p>Description</p> <p>Set gateway ip addr</p>"},{"location":"2024.1/assembly/#ch395_set_ip_addr","title":"ch395_set_ip_addr","text":"<p>Description</p> <p>Set ip row</p>"},{"location":"2024.1/assembly/#ch395_set_ip_addr_sn","title":"ch395_set_ip_addr_sn","text":"<p>Description</p> <p>Set Socket Ip address to connect with</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.1/assembly/#ch395_set_ipraw_pro_sn","title":"ch395_set_ipraw_pro_sn","text":"<p>Description</p> <p>Set ipraw protocol on socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.1/assembly/#ch395_set_mac_adress","title":"ch395_set_mac_adress","text":"<p>Description</p> <p>Set mac address</p>"},{"location":"2024.1/assembly/#ch395_set_proto_type_sn","title":"ch395_set_proto_type_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.1/assembly/#ch395_set_retran_count","title":"ch395_set_retran_count","text":"<p>Description</p> <p>Set retran period</p> <p>Input</p> <ul> <li>Accumulator : Retran period</li> </ul>"},{"location":"2024.1/assembly/#ch395_set_sour_port_sn","title":"ch395_set_sour_port_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.1/assembly/#ch395_tcp_connect_sn","title":"ch395_tcp_connect_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.1/assembly/#ch395_tcp_disconnect_sn","title":"ch395_tcp_disconnect_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.1/assembly/#ch395_tcp_listen_sn","title":"ch395_tcp_listen_sn","text":"<p>Description</p> <p>TCP listen socket</p>"},{"location":"2024.1/assembly/#ch395_write_send_buf_sn","title":"ch395_write_send_buf_sn","text":"<p>Description</p> <p>Send data to socketid</p> <p>Input</p> <ul> <li>Accumulator : Socket ID</li> <li>Y Register : Low length</li> <li>X Register : High length</li> </ul>"},{"location":"2024.1/c/","title":"C","text":""},{"location":"2024.1/c/#c","title":"C","text":""},{"location":"2024.1/c/#unsigned-char-ch395_check_exist","title":"unsigned char ch395_check_exist();","text":"<p>Description</p> <p>Checks if ch395 exists</p>"},{"location":"2024.1/c/#void-ch395_clear_recv_buf_snunsigned-char-id_socket","title":"void ch395_clear_recv_buf_sn(unsigned char ID_SOCKET)","text":"<p>Description</p> <p>Clear receive buffer</p>"},{"location":"2024.1/c/#oid-ch395_close_socket_snunsigned-char-socketid","title":"oid ch395_close_socket_sn(unsigned char socketid)","text":"<p>Description</p> <p>Close socket</p> <p>Input</p>"},{"location":"2024.1/c/#unsigned-char-ch395_get_dhcp_status","title":"unsigned char ch395_get_dhcp_status();","text":"<p>Description</p> <p>Get dhcp status</p>"},{"location":"2024.1/c/#unsigned-int-ch395_get_glob_int_status","title":"unsigned int ch395_get_glob_int_status();","text":"<p>Description</p> <p>Get General interrupt Status</p>"},{"location":"2024.1/c/#unsigned-char-ch395_get_ic_ver","title":"unsigned char ch395_get_ic_ver();","text":"<p>Description</p> <p>Get ch395 firmware version</p>"},{"location":"2024.1/c/#unsigned-char-ch395_get_int_status_snunsigned-char-id_socket","title":"unsigned char ch395_get_int_status_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Check interrupt socket status</p> <p>Input</p>"},{"location":"2024.1/c/#void-ch395_get_ip_infunsigned-char-ip_infos","title":"void ch395_get_ip_inf(unsigned char ip_infos[]);","text":"<p>Description</p> <p>Get ip info</p>"},{"location":"2024.1/c/#void-ch395_get_mac_adressunsigned-char-macaddress","title":"void ch395_get_mac_adress(unsigned char macaddress[]);","text":"<p>Description</p> <p>Get mac address</p>"},{"location":"2024.1/c/#unsigned-char-ch395_get_phy_status","title":"unsigned char ch395_get_phy_status();","text":"<p>Description</p> <p>Get physical status</p>"},{"location":"2024.1/c/#void-ch395_get_recv_len_snunsigned-char-id_socket","title":"void ch395_get_recv_len_sn(unsigned char ID_SOCKET)","text":"<p>Description</p> <p>Get the length received from socket</p> <p>Input</p>"},{"location":"2024.1/c/#void-ch395_get_remot_ipp_snunsigned-char-ptr-unsigned-char-socket","title":"void ch395_get_remot_ipp_sn(unsigned char *ptr, unsigned char socket);","text":"<p>Description</p> <p>Get remote ip connected to the socket</p> <p>Input</p>"},{"location":"2024.1/c/#unsigned-int-ch395_get_socket_status_snunsigned-char-id_socket","title":"unsigned int ch395_get_socket_status_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Returns in A socket status (close/open ... )</p> <p>Input</p>"},{"location":"2024.1/c/#void-ch395_init","title":"void ch395_init();","text":"<p>Description</p> <p>Initialize ch395</p>"},{"location":"2024.1/c/#void-ch395_open_socket_snunsigned-char-id_socket","title":"void ch395_open_socket_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.1/c/#void-ch395_read_recv_buf_snunsigned-char-buffer-unsigned-int-lengthunsigned-char-id_socket","title":"void ch395_read_recv_buf_sn(unsigned char *buffer, unsigned int length,unsigned char ID_SOCKET);","text":"<p>Input</p>"},{"location":"2024.1/c/#void-ch395_reset_all","title":"void ch395_reset_all()","text":"<p>Description</p> <p>Reset ch395</p>"},{"location":"2024.1/c/#void-ch395_retran_periodunsigned-int-period","title":"void ch395_retran_period(unsigned int period);","text":"<p>Description</p> <p>Retran period</p>"},{"location":"2024.1/c/#void-ch395_set_des_port_snunsigned-int-port-unsigned-char-id_socket","title":"void ch395_set_des_port_sn(unsigned int port, unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Set dest port socket</p> <p>Input</p>"},{"location":"2024.1/c/#void-ch395_set_fun_paraunsigned-char-flag","title":"void ch395_set_fun_para(unsigned char flag)","text":"<p>Description</p> <p>Set fun para</p> <p>Description</p> <p>Set gateway ip addr</p> <p>Description</p> <p>Set ip addr</p>"},{"location":"2024.1/c/#void-ch395_set_ip_addr_snunsigned-char-ip_addr-unsigned-char-id_socket","title":"void ch395_set_ip_addr_sn(unsigned char ip_addr[], unsigned char ID_SOCKET)","text":""},{"location":"2024.1/c/#void-ch395_set_ipraw_pro_snunsigned-char-id_socket","title":"void ch395_set_ipraw_pro_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Set ipraw protocol on socket</p> <p>Input</p>"},{"location":"2024.1/c/#void-ch395_set_mac_adressunsigned-char-macaddress","title":"void ch395_set_mac_adress(unsigned char macaddress[]);","text":""},{"location":"2024.1/c/#void-ch395_set_proto_type_snunsigned-char-protounsigned-char-id_socket","title":"void ch395_set_proto_type_sn(unsigned char proto,unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.1/c/#void-ch395_set_retran_countunsigned-int-period","title":"void ch395_set_retran_count(unsigned int period);","text":"<p>Description</p> <p>Set retran period</p>"},{"location":"2024.1/c/#void-ch395_set_sour_port_snunsigned-int-portunsigned-char-id_socket","title":"void ch395_set_sour_port_sn(unsigned int port,unsigned char ID_SOCKET)","text":"<p>Description</p> <p>Set source socket</p> <p>Input</p>"},{"location":"2024.1/c/#void-ch395_tcp_connect_snunsigned-char-id_socket","title":"void ch395_tcp_connect_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.1/c/#void-ch395_tcp_disconnect_snunsigned-char-id_socket","title":"void ch395_tcp_disconnect_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.1/c/#void-ch395_tcp_listen_snunsigned-char-id_socket","title":"void ch395_tcp_listen_sn(unsigned char ID_SOCKET)","text":""},{"location":"2024.1/c/#void-ch395_write_send_buf_snunsigned-char-buffer-unsigned-int-lengthunsigned-char-id_socket","title":"void ch395_write_send_buf_sn(unsigned char *buffer, unsigned int length,unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Send data to socketid</p> <p>Input</p>"},{"location":"2024.2/assembly/","title":"Assembly","text":""},{"location":"2024.2/assembly/#assembly","title":"Assembly","text":""},{"location":"2024.2/assembly/#ch395_check_exist","title":"ch395_check_exist","text":"<p>Description</p> <p>This command is used to test the communication interface and working state to check whether CH395 is working properly. This command needs to input 1 byte of data, which can be any data. If CH395 is working properly, the output data of CH395 will be the bitwise reverse of the input data. For example, if the input data is 57H, the output data will be A8H.</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Returns '#CH395_DETECTED' if it exists</li> </ul> <p>Example</p> <pre><code> jsr ch395_check_exist\ncmp #CH395_DETECTED\nbeq ch395_connected\nrts\nch395_connected:\n</code></pre>"},{"location":"2024.2/assembly/#ch395_clear_recv_buf_sn","title":"ch395_clear_recv_buf_sn","text":"<p>Description</p> <p>This command is used to clear the Socket receive buffer. It is necessary to input 1 byte of Socket index value. Upon receiving this command, CH395 will reset the receiving length of this Socket, and the receiving pointer will point to the buffer head.</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #CH395_SOCKET1 ; Socket ID\njsr ch395_clear_recv_buf_sn\n</code></pre>"},{"location":"2024.2/assembly/#ch395_close_socket_sn","title":"ch395_close_socket_sn","text":"<p>Description</p> <p>This command is used to close Socket. It is necessary to input a 1 byte of Socket index value. After Socket is closed, the receive buffer and transmit buffer of Socket are emptied, but the configuration information is still reserved, and you just need to open the Socket again when using the Socket the next time. In TCP mode, CH395 will automatically disconnect TCP before turning off Socket.</p> <p>Input</p> <ul> <li>Accumulator : The id of the socket to close</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket ID\njsr ch395_close_socket_sn\n</code></pre>"},{"location":"2024.2/assembly/#ch395_dhcp_enable","title":"ch395_dhcp_enable","text":"<p>Description</p> <p>This command is used to start or stop DHCP. It is necessary to input a 1-byte flag. If the flag is 1, it will indicate that DHCP is on; if the flag is 0, it will indicate that DHCP is off. CH395 must be initialized before DHCP is started. After DHCP is started, CH395 will broadcast DHCPDISCOVER message to the network to discover DHCP Server, request the address and other configuration parameters after finding DHCP Server, and then generate GINT_STAT_DHCP interrupt. MCU can send GET_DHCP_STATUS command to get DHCP status. If the status code is 0, it will indicate success, and MCU can send the command GET_IP_INF to get IP, MASK and other information. If the status code is 1, it will indicate error, which is generally caused by timeout, for example, no DHCP Server is found. DHCP is always in a working state after startup unless it receives a DHCP shutdown command from MCU. During this process, if DHCP Server reassigns a configuration to CH395 and the configuration is different from the original configuration, CH395 will still generate an interrupt. After timeout interrupt is generated, if DHCP Server is not found, CH395 will continue to send DHCPDISCOVER message at an interval of about 16 seconds. It takes about 20MS to execute this command. MCU can send GET_CMD_STATUS to query whether the execution has finished and the execution status</p> <p>Input</p> <ul> <li>Accumulator : The mode to activate DHCP mode</li> </ul> <p>Modify</p> <ul> <li>X Register </li> </ul>"},{"location":"2024.2/assembly/#ch395_enter_sleep","title":"ch395_enter_sleep","text":"<p>Description</p> <p>This command enables CH395 chip in a low-power sleep suspended state. When MCU writes a new command to CH395 (no data input command, such as CMD_GET_IC_VER), it will exit the low-power state. For the parallel port and SPI interface communication modes, active SCS chip selection will also cause CH395 to exit the low-power state, so MCU shall immediately disable the SCS chip selection after sending the command CMD_ENTER_SLEEP. In sleep state, MAC and PHY of CH395 will be in power off mode and disconnect Ethernet. Typically, it takes several milliseconds for CH395 to exit the low-power state.</p> <p>Does not work</p>"},{"location":"2024.2/assembly/#ch395_get_cmd_status","title":"ch395_get_cmd_status","text":"<p>Description</p> <p>Get cmd status</p> <p>Example</p> <pre><code> jsr ch395_get_cmd_status\n; Check A for STATUS\nrts\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul>"},{"location":"2024.2/assembly/#ch395_get_dhcp_status","title":"ch395_get_dhcp_status","text":"<p>Description</p> <p>Get dhcp status</p> <p>Example</p> <pre><code> jsr ch395_get_dhcp_status\n; Check A for dhcp status\nrts\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> </ul>"},{"location":"2024.2/assembly/#ch395_get_glob_int_status","title":"ch395_get_glob_int_status","text":"<p>Description</p> <p>Get General interrupt Status</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Status </li> </ul> <p>Example</p> <pre><code> jsr ch395_get_glob_int_status\n; check accumulator to get interrupts states\n</code></pre>"},{"location":"2024.2/assembly/#ch395_get_ic_ver","title":"ch395_get_ic_ver","text":"<p>Description</p> <p>This command is used to get the chip and firmware versions. 1 byte of data returned is the version number, the bit 7 is 0, the bit 6 is 1, and the bits 5-0 are the version number. If the returned value is 41H, remove bits 7 and 6, and the version number will be 01H. It is called chip version in this text</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Version </li> </ul> <p>Example</p> <pre><code> jsr ch395_get_ic_ver\n; Check A for version\nrts\n</code></pre>"},{"location":"2024.2/assembly/#ch395_get_int_status_sn","title":"ch395_get_int_status_sn","text":"<p>Description</p> <p>Check interrupt socket status</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> </ul> <p>Returns</p> <ul> <li>Accumulator : Status of selected socket</li> </ul> <p>Example</p> <pre><code> lda #CH395_SOCKET1 ; Check socket 1\njsr ch395_get_int_status_sn\n; Check interrupt type\nand #CH395_SINT_STAT_SEND_OK\ncmp #CH395_SINT_STAT_SEND_OK\nbeq @send_ok\nrts\n</code></pre>"},{"location":"2024.2/assembly/#ch395_get_ip_inf","title":"ch395_get_ip_inf","text":"<p>Description</p> <p>Get ip info</p> <p>Input</p> <ul> <li>Accumulator : the ptr to modify</li> <li>X Register : the ptr to modify</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> <li>RESTmp value</li> </ul>"},{"location":"2024.2/assembly/#ch395_get_mac_adress","title":"ch395_get_mac_adress","text":"<p>Description</p> <p>Get mac address</p> <p>Input</p> <ul> <li>Accumulator : the ptr</li> <li>X Register : the ptr</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> <li>RESTmp value</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : the content of ptr modified</p> </li> <li> <p>X Register : the content of ptr modified</p> </li> </ul>"},{"location":"2024.2/assembly/#ch395_get_phy_status","title":"ch395_get_phy_status","text":"<p>Description</p> <p>Get physical status</p> <p>Modify</p> <ul> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li>Accumulator : The physical status</li> </ul> <p>Example</p> <pre><code> jsr ch395_get_phy_status\n; Check A physical status\nrts\n</code></pre>"},{"location":"2024.2/assembly/#ch395_get_recv_len_sn","title":"ch395_get_recv_len_sn","text":"<p>Description</p> <p>Get the length received from socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\njsr ch395_get_recv_len_sn\n; check A and X for length received\nch395_connected:\n</code></pre> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : The length</p> </li> <li> <p>X Register : The length</p> </li> </ul>"},{"location":"2024.2/assembly/#ch395_get_remot_ipp_sn","title":"ch395_get_remot_ipp_sn","text":"<p>Description</p> <p>Get remote ip connected to the socket</p> <p>Input</p> <ul> <li>Accumulator : The Socket for the ip to get</li> <li>X Register : The ptr (high) to store the ip</li> <li>Y Register : The ptr (low) to store the ip</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>X Register </li> <li>Y Register </li> <li>RES</li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\nldx #&lt;ip_dest\nldy #&gt;ip_dest\njsr ch395_get_remot_ipp_sn\nrts\nipdest:\n.byte 192,168,0,1\n</code></pre>"},{"location":"2024.2/assembly/#ch395_get_socket_status_sn","title":"ch395_get_socket_status_sn","text":"<p>Description</p> <p>Returns in A socket status (close/open ...)</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>X Register </li> <li>Accumulator </li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : The status</p> </li> <li> <p>X Register : The state</p> </li> </ul> <p>Example</p> <pre><code> lda #$01 ; Socket 1\njsr ch395_get_socket_status_sn\n; check A and X for the state\ncmp #CH395_SOCKET_CLOSED\nbeq @soclet is closed\n</code></pre>"},{"location":"2024.2/assembly/#ch395_init","title":"ch395_init","text":"<p>Description</p> <p>Initialize ch395</p> <p>Modify</p> <ul> <li>Accumulator  Description</li> </ul> <p>Reset ch395</p> <p>Example</p> <pre><code> jsr ch395_init\n; Wait a bit\n</code></pre>"},{"location":"2024.2/assembly/#ch395_open_socket_sn","title":"ch395_open_socket_sn","text":"<p>Description</p> <p>Open socket from arg</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul>"},{"location":"2024.2/assembly/#ch395_read_recv_buf_sn","title":"ch395_read_recv_buf_sn","text":"<p>Description</p> <p>Get buffer from socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ptr to fill</li> <li>X Register : X ptr to fill</li> </ul> <p>Modify</p> <ul> <li>REStmp value</li> <li>RESBtmp value</li> </ul>"},{"location":"2024.2/assembly/#ch395_reset_all","title":"ch395_reset_all","text":"<p>Description</p> <p>This command enables CH395 to perform a hardware reset. Typically, hardware reset is completed within 50mS.</p> <p>Example</p> <pre><code> jsr ch395_reset_all\n; Wait a bit\n</code></pre>"},{"location":"2024.2/assembly/#ch395_retran_period","title":"ch395_retran_period","text":"<p>Description</p> <p>Retran period</p> <p>Input</p> <ul> <li>Accumulator : Period </li> <li>X Register : Period </li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul> <p>Example</p> <pre><code> lda #$FF\nldx #$FF\njsr ch395_retran_period\nrts\n</code></pre>"},{"location":"2024.2/assembly/#ch395_set_baudrate","title":"ch395_set_baudrate","text":"<p>Description</p> <p>This command is used to set the baud rate of CH395 for serial communication. When CH395 works in serial communication mode, the default communication baud rate is set by the level combination of SDO, SDI and SCK pins (refer to Section 6.4 of this datasheet) after reset. When these pins are suspended, the baud rate is 9600bps by default. If MCU supports high communication speed, the serial communication baud rate can be dynamically regulated through this command. This command requires the input of three data, namely, baudrate coefficient 0, baud rate coefficient 1 and baud rate coefficient 2. The following table shows the corresponding relationship with baud rates.</p>"},{"location":"2024.2/assembly/#ch395_set_des_port_sn","title":"ch395_set_des_port_sn","text":"<p>Description</p> <p>Set dest port socket</p> <p>Input</p> <ul> <li>Accumulator : Socketid </li> <li>Y Register : Low int</li> <li>X Register : high int</li> </ul> <p>Modify</p> <ul> <li>REStmp</li> </ul> <p>Example</p> <pre><code> lda #$01\nldx #80\nldx #$00\njsr ch395_set_des_port_sn\nrts\n</code></pre>"},{"location":"2024.2/assembly/#ch395_set_fun_para","title":"ch395_set_fun_para","text":"<p>Description</p> <p>Set fun para</p> <p>Input</p> <ul> <li>Accumulator : Value </li> </ul> <p>Modify</p> <ul> <li>Y Register </li> <li>Accumulator </li> </ul>"},{"location":"2024.2/assembly/#ch395_set_gwip_addr","title":"ch395_set_gwip_addr","text":"<p>Description</p> <p>This command is used to set the gateway address for CH395. It is necessary to input 4 bytes of IP address</p> <p>Does not work</p>"},{"location":"2024.2/assembly/#ch395_set_ip_addr","title":"ch395_set_ip_addr","text":"<p>Description</p> <p>Set ip row</p> <p>Does not work</p>"},{"location":"2024.2/assembly/#ch395_set_ip_addr_sn","title":"ch395_set_ip_addr_sn","text":"<p>Description</p> <p>Set Socket Ip address to connect with</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.2/assembly/#ch395_set_ipraw_pro_sn","title":"ch395_set_ipraw_pro_sn","text":"<p>Description</p> <p>Set ipraw protocol on socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>X Register : the mode proto</li> </ul> <p>Modify</p> <ul> <li>Y Register </li> </ul>"},{"location":"2024.2/assembly/#ch395_set_mac_adress","title":"ch395_set_mac_adress","text":"<p>Description</p> <p>This command is used to set MAC address for CH395. It is necessary to input 6 bytes of MAC, with low bytes of MAC address in front. CH395 chip will store MAC address in the internal EEPROM. It will take 100mS to execute this command.MAC address assigned by IEEE has been burned when CH395 chip is delivered. If it is not necessary, please do not set MAC address</p> <p>Input</p> <ul> <li>Accumulator : Low ptr mac adress</li> <li>X Register : High ptr mac adress</li> </ul> <p>Modify</p> <ul> <li>Accumulator </li> <li>Y Register </li> <li>RESTmp</li> </ul>"},{"location":"2024.2/assembly/#ch395_set_mask_addr","title":"ch395_set_mask_addr","text":"<p>Description</p> <p>This command is used to set the subnet mask for CH395. It is necessary to input 4 bytes of mask for this command. It is 255.255.255.0 by default and may not be set</p> <p>Does not work</p>"},{"location":"2024.2/assembly/#ch395_set_phy","title":"ch395_set_phy","text":"<p>Description</p> <p>This command is used to set Ethernet PHY connection mode of CH395. The connection mode is automated negotiation mode by default. This command needs to input 1 byte of data, which is the connection mode code: Disconnect PHY when the connection mode code is 01H; PHY is 10M full duplex when the connection mode code is 02H; PHY is 10M half duplex when the connection mode code is 04H; PHY is 100M full duplex when the connection mode code is 08H; PHY is 100M half duplex when the connection mode code is 10H; PHY is automated negotiation when the connection mode code is 20H. When CH395 receives this command, it will reset MAC and PHY and reconnect according to the newly set connection mode. If Ethernet is already connected, it will be disconnected and reconnected.</p> <p>Does not work</p>"},{"location":"2024.2/assembly/#ch395_set_proto_type_sn","title":"ch395_set_proto_type_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.2/assembly/#ch395_set_retran_count","title":"ch395_set_retran_count","text":"<p>Description</p> <p>Set retran period</p> <p>Input</p> <ul> <li>Accumulator : Retran period</li> </ul>"},{"location":"2024.2/assembly/#ch395_set_sour_port_sn","title":"ch395_set_sour_port_sn","text":"<p>Description</p> <p>Set source port</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ptr address</li> <li>X Register : High ptr address</li> </ul> <p>Modify</p> <ul> <li>RES</li> </ul>"},{"location":"2024.2/assembly/#ch395_set_ttl","title":"ch395_set_ttl","text":"<p>Description</p> <p>This command is used to set Socket TTL. It is necessary to input 1 byte of Socket index value and 1 byte of TTL value. It shall be set after the Socket is opened, and the maximum value is 128</p> <p>Input</p> <ul> <li>Accumulator : Socket ID</li> <li>X Register : TTL value</li> </ul>"},{"location":"2024.2/assembly/#ch395_tcp_connect_sn","title":"ch395_tcp_connect_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.2/assembly/#ch395_tcp_disconnect_sn","title":"ch395_tcp_disconnect_sn","text":"<p>Input</p> <ul> <li>Accumulator : Socket id</li> </ul>"},{"location":"2024.2/assembly/#ch395_tcp_listen_sn","title":"ch395_tcp_listen_sn","text":"<p>Description</p> <p>TCP listen socket</p>"},{"location":"2024.2/assembly/#ch395_write_send_buf_sn","title":"ch395_write_send_buf_sn","text":"<p>Description</p> <p>Send data to socketid</p> <p>Input</p> <ul> <li>Accumulator : Socket ID</li> <li>Y Register : Low length</li> <li>X Register : High length</li> <li>RESB : Adress ptr to read</li> </ul> <p>Modify</p> <ul> <li>RESTmp</li> </ul>"},{"location":"2024.2/c/","title":"C","text":""},{"location":"2024.2/c/#c","title":"C","text":""},{"location":"2024.2/c/#unsigned-char-ch395_check_exist","title":"unsigned char ch395_check_exist();","text":"<p>Description</p> <p>Checks if ch395 exists</p>"},{"location":"2024.2/c/#void-ch395_clear_recv_buf_snunsigned-char-id_socket","title":"void ch395_clear_recv_buf_sn(unsigned char ID_SOCKET)","text":"<p>Description</p> <p>This command is used to clear the Socket receive buffer. It is necessary to input 1 byte of Socket index value. Upon receiving this command, CH395 will reset the receiving length of this Socket, and the receiving pointer will point to the buffer head.</p>"},{"location":"2024.2/c/#void-ch395_close_socket_snunsigned-char-socketid","title":"void ch395_close_socket_sn(unsigned char socketid)","text":"<p>Description</p> <p>This command is used to close Socket. It is necessary to input a 1 byte of Socket index value. After Socket is closed, the receive buffer and transmit buffer of Socket are emptied, but the configuration information is still reserved, and you just need to open the Socket again when using the Socket the next time. In TCP mode, CH395 will automatically disconnect TCP before turning off Socket.</p> <p>Input</p>"},{"location":"2024.2/c/#void-ch395_dhcp_enable","title":"void ch395_dhcp_enable()","text":"<p>Description</p> <p>This command is used to start or stop DHCP. It is necessary to input a 1-byte flag. If the flag is 1, it will indicate that DHCP is on; if the flag is 0, it will indicate that DHCP is off. CH395 must be initialized before DHCP is started. After DHCP is started, CH395 will broadcast DHCPDISCOVER message to the network to discover DHCP Server, request the address and other configuration parameters after finding DHCP Server, and then generate GINT_STAT_DHCP interrupt. MCU can send GET_DHCP_STATUS command to get DHCP status. If the status code is 0, it will indicate success, and MCU can send the command GET_IP_INF to get IP, MASK and other information. If the status code is 1, it will indicate error, which is generally caused by timeout, for example, no DHCP Server is found. DHCP is always in a working state after startup unless it receives a DHCP shutdown command from MCU. During this process, if DHCP Server reassigns a configuration to CH395 and the configuration is different from the original configuration, CH395 will still generate an interrupt. After timeout interrupt is generated, if DHCP Server is not found, CH395 will continue to send DHCPDISCOVER message at an interval of about 16 seconds. It takes about 20MS to execute this command. MCU can send GET_CMD_STATUS to query whether the execution has finished and the execution status</p> <p>Description</p> <p>Get cmd status</p>"},{"location":"2024.2/c/#unsigned-char-ch395_get_cmd_status","title":"unsigned char ch395_get_cmd_status();","text":""},{"location":"2024.2/c/#unsigned-char-ch395_get_dhcp_status","title":"unsigned char ch395_get_dhcp_status();","text":"<p>Description</p> <p>Get dhcp status</p>"},{"location":"2024.2/c/#unsigned-int-ch395_get_glob_int_status","title":"unsigned int ch395_get_glob_int_status();","text":"<p>Description</p> <p>Get General interrupt Status</p>"},{"location":"2024.2/c/#unsigned-char-ch395_get_ic_ver","title":"unsigned char ch395_get_ic_ver();","text":"<p>Description</p> <p>Get ch395 firmware version</p>"},{"location":"2024.2/c/#unsigned-char-ch395_get_int_status_snunsigned-char-id_socket","title":"unsigned char ch395_get_int_status_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Check interrupt socket status</p> <p>Input</p>"},{"location":"2024.2/c/#void-ch395_get_ip_infunsigned-char-ip_infos","title":"void ch395_get_ip_inf(unsigned char ip_infos[]);","text":"<p>Description</p> <p>Get ip info</p>"},{"location":"2024.2/c/#void-ch395_get_mac_adressunsigned-char-macaddress","title":"void ch395_get_mac_adress(unsigned char macaddress[]);","text":"<p>Description</p> <p>Get mac address</p>"},{"location":"2024.2/c/#unsigned-char-ch395_get_phy_status","title":"unsigned char ch395_get_phy_status();","text":"<p>Description</p> <p>Get physical status</p>"},{"location":"2024.2/c/#void-ch395_get_recv_len_snunsigned-char-id_socket","title":"void ch395_get_recv_len_sn(unsigned char ID_SOCKET)","text":"<p>Description</p> <p>Get the length received from socket</p> <p>Input</p>"},{"location":"2024.2/c/#void-ch395_get_remot_ipp_snunsigned-char-ptr-unsigned-char-socket","title":"void ch395_get_remot_ipp_sn(unsigned char *ptr, unsigned char socket);","text":"<p>Description</p> <p>Get remote ip connected to the socket</p> <p>Input</p>"},{"location":"2024.2/c/#unsigned-int-ch395_get_socket_status_snunsigned-char-id_socket","title":"unsigned int ch395_get_socket_status_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Returns in A socket status (close/open ... )</p> <p>Input</p>"},{"location":"2024.2/c/#void-ch395_init","title":"void ch395_init();","text":"<p>Description</p> <p>Initialize ch395</p>"},{"location":"2024.2/c/#void-ch395_open_socket_snunsigned-char-id_socket","title":"void ch395_open_socket_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.2/c/#void-ch395_read_recv_buf_snunsigned-char-buffer-unsigned-int-ptr2unsigned-char-id_socket","title":"void ch395_read_recv_buf_sn(unsigned char *buffer, unsigned int ptr2,unsigned char ID_SOCKET);","text":"<p>Input</p>"},{"location":"2024.2/c/#void-ch395_reset_all","title":"void ch395_reset_all()","text":"<p>Description</p> <p>Reset ch395</p>"},{"location":"2024.2/c/#void-ch395_retran_periodunsigned-int-period","title":"void ch395_retran_period(unsigned int period);","text":"<p>Description</p> <p>Retran period</p>"},{"location":"2024.2/c/#void-ch395_set_des_port_snunsigned-int-port-unsigned-char-id_socket","title":"void ch395_set_des_port_sn(unsigned int port, unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Set dest port socket</p> <p>Input</p>"},{"location":"2024.2/c/#void-ch395_set_fun_paraunsigned-char-flag","title":"void ch395_set_fun_para(unsigned char flag)","text":"<p>Description</p> <p>Set fun para</p> <p>Description</p> <p>Set gateway ip addr</p> <p>Description</p> <p>Set ip addr</p>"},{"location":"2024.2/c/#void-ch395_set_ip_addr_snunsigned-char-ip_addr-unsigned-char-id_socket","title":"void ch395_set_ip_addr_sn(unsigned char ip_addr[], unsigned char ID_SOCKET)","text":""},{"location":"2024.2/c/#void-ch395_set_ipraw_pro_snunsigned-char-id_socket","title":"void ch395_set_ipraw_pro_sn(unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Set ipraw protocol on socket</p> <p>Input</p>"},{"location":"2024.2/c/#void-ch395_set_mac_adressunsigned-char-macaddress","title":"void ch395_set_mac_adress(unsigned char macaddress[]);","text":""},{"location":"2024.2/c/#void-ch395_set_proto_type_snunsigned-char-protounsigned-char-id_socket","title":"void ch395_set_proto_type_sn(unsigned char proto,unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.2/c/#void-ch395_set_retran_countunsigned-int-period","title":"void ch395_set_retran_count(unsigned int period);","text":"<p>Description</p> <p>Set retran period</p>"},{"location":"2024.2/c/#void-ch395_set_sour_port_snunsigned-int-portunsigned-char-id_socket","title":"void ch395_set_sour_port_sn(unsigned int port,unsigned char ID_SOCKET)","text":"<p>Description</p> <p>Set source socket</p> <p>Input</p> <p>Description</p> <p>This command is used to set Socket TTL. It is necessary to input 1 byte of Socket index value and 1 byte of TTL value. It shall be set after the Socket is opened, and the maximum value is 128</p>"},{"location":"2024.2/c/#ch395_set_ttlunsigned-char-id_socket-unsigned-char-ttl_value","title":"ch395_set_ttl(unsigned char ID_SOCKET, unsigned char ttl_value);","text":""},{"location":"2024.2/c/#void-ch395_tcp_connect_snunsigned-char-id_socket","title":"void ch395_tcp_connect_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.2/c/#void-ch395_tcp_disconnect_snunsigned-char-id_socket","title":"void ch395_tcp_disconnect_sn(unsigned char ID_SOCKET)","text":"<p>Input</p>"},{"location":"2024.2/c/#void-ch395_tcp_listen_snunsigned-char-id_socket","title":"void ch395_tcp_listen_sn(unsigned char ID_SOCKET)","text":""},{"location":"2024.2/c/#void-ch395_write_send_buf_snunsigned-char-buffer-unsigned-int-lengthunsigned-char-id_socket","title":"void ch395_write_send_buf_sn(unsigned char *buffer, unsigned int length,unsigned char ID_SOCKET);","text":"<p>Description</p> <p>Send data to socketid [Not working]</p> <p>Input</p>"}]}